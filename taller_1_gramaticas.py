# -*- coding: utf-8 -*-
"""Taller 1 - gramaticas

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ixbd8MzBCEcNHePL7-vHtbtdBXEYykmC
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# 
# import sys
# 
# ! if [ ! -d Jove ]; then git clone https://github.com/ganeshutah/Jove Jove; fi
# sys.path.append('./Jove')
# sys.path.append('./Jove/jove')
# 
# # -- common imports --
# from jove.SystemImports import *
# from jove.LangDef import *
# from jove.Def_DFA import *
# from jove.Def_NFA import *
# from jove.Def_md2mc import *
# from jove.AnimateDFA import *

!!! 1)
A = md2mc('''

DFA
I: b -> I
I: a -> 1
1: a -> 1
1: b -> 2
2: a -> 1
2: b -> 3
3: a -> 1
3: b -> F
F: a -> I
F: b -> F
''')
dotObj_dfa(A,FuseEdges=True)

"""```
Q= {I, 1, 2, 3, F}
Σ={a, b}
δ= QxΣ= Q
Q0={I}
F={F}

   I  1  2  3  F
a  1  1  1  1  I  
b  I  2  3  F  F
```
"""

!!! 2)
A = md2mc('''

DFA
I: 0 -> I
I: 1 -> A
A: 0 -> B
A: 1 -> A
B: 0 -> F
B: 1 -> A
F: 0 -> F
F: 1 -> A
''')
dotObj_dfa(A,FuseEdges=True)

"""```
Q= {I, A, B, F}  
Σ={0, 1}  
δ= QxΣ= Q   
Q0={I}  
F={F}

   I  A  B  F
0  I  B  F  F
1  A  A  A  A
```






"""

!!! 3)
A = md2mc('''

NFA
I: a -> I
I: b -> I
I: a -> q2
I: b -> q1
q1: a -> q2
q1: a -> F
q2: a -> F
''')
dotObj_nfa(A,FuseEdges=True)

"""```
3)

-ε: I
-b: {I, q1}
-ba: {I, q2, F}
-baa: {I, q2, F}


4)

Q= {I, A, B, F}  
Σ={0, 1}  
δ= QxΣ= Q   
Q0={I}  
F={F}

   I  A  B  F
0  I  B  F  F
1  A  A  A  A
```



"""

!!! 5)
!!! no pude poner la I multiples veces así que en todos los estados que no son el inicial, O=I

A = md2mc('''

DFA
I: a -> Oq1
I: b -> I
I: c -> Oq3
Oq1: a -> Oq1BH
Oq1: b -> Fq2O
Oq1: c -> Oq3BH
Oq3: a -> Oq1BH
Oq3: b -> OBH
Oq3: c -> Fq4Oq3
Oq1BH: a -> Oq1BH
Oq1BH: b -> Fq2O
Oq1BH: c -> Oq3BH
Fq2O: a -> Oq1BH
Fq2O: b -> OBH
Fq2O: c -> Oq3BH
Oq3BH: a -> Oq1BH
Oq3BH: b -> OBH
Oq3BH: c -> Fq4Oq3
OBH: a -> Oq1
OBH: b -> I
OBH: c -> Oq3
Fq4Oq3: a -> Oq1BH
Fq4Oq3: b -> OBH
Fq4Oq3: c -> Fq4Oq3BH
Fq4Oq3BH: a -> Oq1BH
Fq4Oq3BH: b -> OBH
Fq4Oq3BH: c -> Fq4Oq3BH
''')
dotObj_dfa(A,FuseEdges=True)

"""```
6)


6.1)
NFA:
Q= {I, q1, Fq2, q3, Fq4}  
Σ={a, b, c}  
δ= QxΣ= Q   
Q0={I}  
F={Fq2, Fq4}

DFA:
Q= {I, Oq1, Oq3, Oq1BH, Fq2O, Oq3BH, OBH, Fq4Oq3}  
Σ={a, b, c}  
δ= QxΣ= Q   
Q0={I}  
F={Fq2O, Fq4Oq3}


6.2)
NFA:
    I     q1   Fq2   q3   Fq4
a {I,q1} {  } {   } {  } {   }
b   I    Fq2  {   } {  } {   }  
c {I,q3} {  } {   } Fq4  {   }

DFA:
    I     Oq1    Oq3    Oq1BH    Fq2O    Oq3BH    OBH    Fq4Oq3
a  Oq1   Oq1BH  Oq1BH   Oq1BH   Oq1BH    Oq1BH    Oq1    Oq1BH
b   I    Fq2O    OBH    Fq2O     OBH      OBH      I      OBH        
c  Oq3   Oq3BH  Fq4Oq3  Oq3BH   Oq3BH    Fq4Oq3   Oq3    Fq4Oq3



7)
Dados L y M, dos lenguajes regulares:

Como L es LR existe un DFA A= (Qa, Σ, δa, Ia, Fa) tal que L = L(A)

Como M es LR existe un DFA B= (Qb, Σ, δb, Ib, Fb) tal que M = M(B)

A partir de A y B es posible definir un NFA C = (Q, Σ, δ, I, F) tal que L(C) = L(A) ∪ L(B) = L ∪ M

El automata C se define de la siguiente manera:
Q = Qa ∪ Qb ∪ I
Σ = Σ
Q0 = I
F = Fa ∪ Fb

δ: Q x Σ → Q se define como:

δ(qn, w) = {
            δa(qn, w) si qn ∈ Qa
            δb(qn, w) si qn ∈ Qb
            {(I,ε,{IA, Ib})}
           }

para todo qn ∈ Qa ∪ Qb ∪ I y para todo w ∈ Σ

Como L(C) = L(A) ∪ M(B) = L ∪ M, entonces L ∪ M es un lenguaje regular.


8)

Dados L y M, dos lenguajes regulares:

Como L es LR existe un DFA A= (Qa, Σ, δa, Ia, Fa) tal que L = L(A)

Como M es LR existe un DFA B= (Qb, Σ, δb, Ib, Fb) tal que M = M(B)

A partir de A y B es posible definir un NFA C = (Q, Σ, δ, I, F) tal que L(C) = L(A) ∩ L(B) = L ∩ M

El automata C se define de la siguiente manera:
Q = Qa ∪ Qb ∪ I
Σ = Σ
Q0 = I
F = Fa ∩ Fb

δ: Q x Σ → Q se define como:

δ(qn, w) = {
            δa(qn, w) si qn ∈ Qa
            δb(qn, w) si qn ∈ Qb
            {(I,ε,{IA, Ib})}
           }

para todo qn ∈ Qa ∪ Qb ∪ I y para todo w ∈ Σ

Como L(C) = L(A) ∩ M(B) = L ∩ M, entonces L ∩ M es un lenguaje regular.

Este automata resulta en un NFA, en cuyo caso se puede convertir a un DFA


9)

Dados L y M, dos lenguajes regulares:

Como L es LR existe un DFA A= (Qa, Σ, δa, Ia, Fa) tal que L = L(A)

Como M es LR existe un DFA B= (Qb, Σ, δb, Ib, Fb) tal que M = M(B)

A partir de A y B es posible definir un DFA C = (Q, Σ, δ, I, F) tal que L(C) = L(A) * L(B) = L * M

El automata C se define de la siguiente manera:
Q = Qa ∪ Qb ∪ I
Σ = Σ
Q0 = I
F = Fa ∪ Fb

se crea un estado inicial I = Ia ∪ Ib
δ: Q x Σ → Q se define como:

δ(qn, w) = {
            δa(qn, w) si qn ∈ Qa
            δb(qn, w) si qn ∈ Qb
            {(I,ε,{IA, Ib})}
           }

para todo qn ∈ Qa ∪ Qb y para todo w ∈ Σ

Como L(C) = L(A) * M(B) = L * M, entonces L * M es un lenguaje regular.

Este automata resulta en un NFA, en cuyo caso se puede convertir a un DFA


10)

Dado L, un lenguaje regular:

Como L es LR existe un DFA A= (Qa, Σ, δa, Ia, Fa) tal que L = L(A)

A partir de A es posible definir un FA B = (Q, Σ, δ, I, F) tal que RL(B) = L(A)

El automata B se define de la siguiente manera:
Q = Qa
Σ = Σ
Q0 = Fa
F = Ia

δ: Q x Σ → Q donde las transiciones van en dirección contraria a las de δa

Este automata puede resultar en un NFA, en cuyo caso se puede convertir a un DFA
```
"""

!!! 11)
A = md2mc('''

DFA
I: a -> q1
I: b -> Fq2
q1: a -> q3
Fq2: a -> q9
Fq2: b -> Fq4
q3: b -> Fq2
q1: b -> q5
q5: a -> Fq6
Fq4: b -> q7
Fq4: a -> q8
q7: a -> q7
q7: b -> q7
q8: a -> Fq4
q8: b -> q7
q9: a -> Fq2
q9: b -> q11
Fq6: a -> q10
Fq6: b -> Fq4
q11: a -> Fq4
q11: b -> q7
q10: a -> Fq6
q10: b -> q12
q12: a -> Fq4
q12: b -> q7
q5: b -> q12


''')
dotObj_dfa(A,FuseEdges=True)

"""```
Q= {IF, 1}  
Σ={a, b}  
δ= QxΣ= Q   
Q0={IF}  
F={IF}

   IF 1
a  1  IF
b  IF 1
```
"""

!!! 12)
A = md2mc('''

DFA
I: 1 -> FA
I: 0 -> I
FA: 1 -> FB
FA: 0 -> I
FB: 1 -> FA
FB: 0 -> I

''')
dotObj_dfa(A,FuseEdges=True)

"""```
Q= {I, FA, FB}  
Σ={0, 1}  
δ= QxΣ= Q   
Q0={I}  
F={FA, FB}

   I  FA  FB
0  I  I   I
1  FA FB  FA
```
"""

!!! 13)
A = md2mc('''

DFA
I: a -> 4
I: b -> 1
1: a -> 5
1: b -> 2
2: a -> 6
2: b -> F3
F3: a -> 12
F3: b -> F3
4: a -> I
4: b -> 7
5: a -> 1
5: b -> 6
6: a -> 2
6: b -> 12
7: a -> 9
7: b -> 8
8: a -> 10
8: b -> 12
9: a -> 11
9: b -> 2
10: a -> 8
10: b -> F3
11: a -> 9
11: b -> 8
12: a -> F3
12: b -> 12

''')
dotObj_dfa(A,FuseEdges=False)

"""```
Q= {I, 1, 2, F3, 4, 5, 6, 7, 8, 9, 10, 11, 12}  
Σ={a, b}  
δ= QxΣ= Q   
Q0={I}  
F={F3}

   I  1  2  F3  4  5  6  7  8  9  10  11  12  
a  4  5  6  12  I  1  2  9  10 11 8   9   F3   
b  1  2  F3 F3  7  6  12 8  12 2  F3  8   12
```
"""

!!! 14)
A = md2mc('''

DFA
IF: a -> 1
IF: b -> 2
1: a -> IF
1: b -> F3
2: a -> F3
2: b -> IF
F3: a -> 2
F3: b -> 1

''')
dotObj_dfa(A,FuseEdges=True)

"""```
Q= {IF, 1, 2, F3}  
Σ={a, b}  
δ= QxΣ= Q   
Q0={IF}  
F={IF, F3}

   IF  1  2  F3
a  1   IF F3 2
b  2   F3 IF 1
```
"""

!!! 15)
A = md2mc('''

DFA
I: 0 -> I
I: 1 -> Fq2
Fq2: 0 -> q3
Fq2: 1 -> Fq2
q3: 0 -> Fq2
q3: 1 -> Fq2

''')
dotObj_dfa(A,FuseEdges=False)

"""```
-ε: {I} / No es de aceptación
-11: {Fq2} / Es de aceptación
-010: {q3} / No es de aceptación
-10: {q3} / No es de aceptación
-0101: {Fq2} / Es de aceptación

```
"""

!!! 16)
A = md2mc('''

DFA
I: a -> Fq1
I: b -> q3
I: c -> q3
Fq1: a -> Fq1
Fq1: b -> q2
Fq1: c -> q3
q2: a -> Fq1
q2: b -> q2
q2: c -> q3
q3: a -> q3
q3: b -> q3
q3: c -> q3

''')
dotObj_dfa(A,FuseEdges=True)

"""```
16)
Q= {I, Fq1, q2, q3}  
Σ={a, b, c}  
δ= QxΣ= Q   
Q0={I}  
F={Fq1}

   I   Fq1   q2   q3
a  Fq1 Fq1   Fq1  q3
b  q3  q2    q2   q3
c  q3  q3    q3   q3
```
"""

!!! 17)
A = md2mc('''

DFA
I: 0 -> A
I: x -> D
I: 1 -> D
A: 0 -> D
A: x -> B
A: 1 -> D
B: 0 -> D
B: 1 -> FC
FC: 0 -> FC
FC: x -> FC
FC: 1 -> FC
D: 0 -> D
D: x -> D
D: 1 -> D


''')
dotObj_dfa(A,FuseEdges=True)

!!! 18)
A = md2mc('''

DFA
I: 0 -> I
I: 1 -> 1
1: 0 -> 1
1: 1 -> F2
F2: 0 -> F2
F2: 1 -> F2


''')
dotObj_dfa(A,FuseEdges=True)

!!! 19)
A = md2mc('''

DFA
I: 0 -> I
I: 1 -> FA
FA: 0 -> FA
FA: 1 -> FB
FB: 0 -> FB
FB: 1 -> FC
FC: 0 -> FC
FC: 1 -> FD
FD: 0 -> FD
FD: 1 -> E
E: 0 -> E
E: 1 -> FA

''')
dotObj_dfa(A,FuseEdges=True)

"""```
19)
Q= {I, FA, FB, FC, FD, E}  
Σ={0, 1}  
δ= QxΣ= Q   
Q0={I}  
F={FA, FB, FC, FD}

   I  FA  FB  FC  FD  E
0  I  FA  FB  FC  FD  E
1  FA FB  FC  FD  E   FA

```
"""

!!! 20)
A = md2mc('''

NFA
I: ε -> A, B
A: 0 -> A
A: 1 -> C
B: 0 -> B
B: 1 -> B, C
C: 0 -> D
C: 1 -> C
D: 0 -> A, B
D: 1 -> FE
FE: 0 -> FE
FE: 1 -> FE


''')
dotObj_nfa(A,FuseEdges=True)

"""```
21) w: 1101

                 ε            ε            1             1  
          A < --------- I --------- > B --------- > B --------- > B
          |                           |             |             |
        1 |                           | 1           | 1         0 |
          |                           |             |             |   1
          ----------- > C < -----------             C             B ----- > B
                        |                           |             |
                      1 |                           | 0         1 |
                        |                           |             |
          D < --------- C                           D             C
          |      0                                  |
        1 |                                         | 1
          |                                         |
          FE                                        FE
```
"""

!!! 22)
A = md2mc('''

DFA
IAB: 0 -> AB
IAB: 1 -> BC
AB: 0 -> AB
AB: 1 -> BC
BC: 0 -> BD
BC: 1 -> BC
BD: 0 -> AB
BD: 1 -> FEBC
FEBC: 0 -> FEBD
FEBC: 1 -> FEBC
FEBD: 0 -> FEAB
FEBD: 1 -> FEABC
FEAB: 0 -> FEAB
FEAB: 1 -> FEBC
FEABC: 0 -> FEABD
FEABC: 1 -> FEBC
FEABD: 0 -> FEAB
FEABD: 1 -> FEBC

''')
dotObj_dfa(A,FuseEdges=True)

!!! 23)
A = md2mc('''

DFA
IF: 0 -> A
IF: 1 -> C
A: 0 -> FB
A: 1 -> E
FB: 0 -> K
FB: 1 -> L
C: 0 -> G
C: 1 -> FD
FD: 0 -> FD
FD: 1 -> C
E: 0 -> FH
E: 1 -> FD
G: 0 -> FH
G: 1 -> FD
FH: 0 -> J
FH: 1 -> FD
J: 0 -> J
J: 1 -> FD
K: 0 -> K
K: 1 -> L
L: 0 -> L
L: 1 -> FD


''')
dotObj_dfa(A,FuseEdges=True)

"""```
Q= {IF, A, FB, C, FD, E, G, FH, J, K, L}  
Σ={0, 1}  
δ= QxΣ= Q   
Q0={IF}  
F={FB, FD, FH}

   IF   A   FB   C   FD   E   G   FH   J   K   L
0  A    FB  K    G   FD   FH  FH  J    J   K   L
1  C    E   L    FD  C    FD  FD  FD   FD  L   FD

```
"""

!!! 24)
A = md2mc('''

DFA
I: 0 -> FA
I: 1 -> FB
FA: 0 -> C
FA: 1 -> I
FB: 0 -> I
FB: 1 -> D
C: 0 -> FA
C: 1 -> FA
D: 0 -> FB
D: 1 -> FB

''')
dotObj_dfa(A,FuseEdges=False)

!!! 25)
!!! no pude poner la I multiples veces así que en todos los estados que no son el inicial, O=I
A = md2mc('''

DFA
I: 0 -> Oq1
I: 1 -> I
Oq1: 0 -> Oq1BH
Oq1: 1 -> Fq2O
Oq1BH: 0 -> Oq1BH
Oq1BH: 1 ->Fq2O
Fq2O: 0 -> Oq1BH
Fq2O: 1 -> OBH
OBH: 0 -> Oq1
OBH: 1 -> I

''')
dotObj_dfa(A,FuseEdges=False)

!!! 26)
A = md2mc('''

DFA
I: 0 -> I
I: 1 -> I

''')
dotObj_dfa(A,FuseEdges=True)

"""```
26)

- El automata no reconoce ningún lenguaje
```
"""

!!! 27)
A = md2mc('''

DFA
IF: 0 -> q1
IF: 1 -> q1

''')
dotObj_dfa(A,FuseEdges=True)

"""```
27)

- El automata reconoce el lenguaje con la cadena vacía, es decir, ε
```
"""